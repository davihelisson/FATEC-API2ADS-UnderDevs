# Partes de Código para Aprendizado

## Testes Unitários
```python
import unittest

def adicionar(a, b):
    return a + b

class TestOperacoesMatematicas(unittest.TestCase):
    def test_adicionar(self):
        self.assertEqual(adicionar(1, 2), 3)
```

## Documentação
```python
def multiplicar(a, b):
    """Multiplica dois números e retorna o resultado."""
    return a * b
```

## Melhoria de Código
```python
# Código mal escrito
def calc(x, y):
    return x+y

# Versão melhorada
def calcular_soma(x, y):
    """Calcula a soma de dois números."""
    return x + y
```

## Aprendizado e Explicação
```python
# Exemplo de compreensão de lista
quadrados = [x**2 for x in range(10)]
```

## Manipulação de Arquivos
```python
with open('dados.txt', 'w') as f:
    f.write("Olá, Mundo!")
```

## Estruturas de Dados
```python
meu_dict = {'nome': 'Alice', 'idade': 25}
```

## Programação Orientada a Objetos
```python
class Animal:
    def __init__(self, nome):
        self.nome = nome

class Cachorro(Animal):
    def latir(self):
        return "Au Au!"
